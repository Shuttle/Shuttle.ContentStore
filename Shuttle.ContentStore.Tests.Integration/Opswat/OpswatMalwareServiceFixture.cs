using System;
using System.IO;
using System.Threading;
using Shuttle.ContentStore.Opswat;
using NUnit.Framework;

namespace Shuttle.ContentStore.Tests.Integration.Opswat
{
    [TestFixture]
    public class OpswatMalwareServiceFixture
    {
        private void AssertPollIntervalTimespan(Document document)
        {
            Assert.That(document.GetPropertyValue("PollIntervalTimespan"),
                document.ContainsProperty("sandbox_id") ? Is.EqualTo("00:00:30") : Is.EqualTo("00:00:05"));
        }

        [Test]
        public void Should_be_able_to_handle_a_benign_spreadsheet()
        {
            var configuration = OpswatSection.Configuration();
            var service = new OpswatMalwareService(configuration, new OpswatApi(configuration));

            var document = new Document(Guid.NewGuid(), Guid.NewGuid(), "benign.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                File.ReadAllBytes(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, ".files\\benign.xlsx")),
                "integration-test", "system", DateTime.Now);

            service.Register(document);

            Assert.That(document.ContainsProperty("data_id"), Is.True);
            Assert.That(document.ContainsProperty("sha256"), Is.True);
            Assert.That(document.ContainsProperty("in_queue"), Is.True);
            Assert.That(document.GetPropertyValue("status"), Is.EqualTo("inqueue"));

            Assert.That(document.ContainsProperty("scan_all_result_i"), Is.False);
            Assert.That(document.ContainsProperty("scan_all_result_a"), Is.False);
            Assert.That(document.ContainsProperty("progress_percentage"), Is.False);
            Assert.That(document.ContainsProperty("PollIntervalTimespan"), Is.False);

            Poll(service, document, 120);

            Assert.That(document.ContainsProperty("data_id"), Is.True);

            if (configuration.ShouldSandbox(".xlsx"))
            {
                Assert.That(document.ContainsProperty("sandbox_id"), Is.True);
            }

            Assert.That(document.ContainsProperty("in_queue"), Is.False);
            Assert.That(document.ContainsProperty("status"), Is.False);
            Assert.That(document.ContainsProperty("PollIntervalTimespan"), Is.False);

            Assert.That(document.GetPropertyValue("scan_all_result_i"), Is.EqualTo("0"));
            Assert.That(document.GetPropertyValue("scan_all_result_a").ToLowerInvariant(),
                Is.EqualTo("no threat detected"));
            Assert.That(document.GetPropertyValue("progress_percentage"), Is.EqualTo("100"));
        }

        private void Poll(OpswatMalwareService service, Document document, int timeoutSeconds)
        {
            var timeout = DateTime.Now.AddSeconds(timeoutSeconds);

            while (service.Poll(document) == ServiceStatus.Processing && DateTime.Now < timeout)
            {
                AssertPollIntervalTimespan(document);

                Thread.Sleep(5000);
            }
        }

        [Test]
        public void Should_be_able_to_handle_a_macro_enabled_spreadsheet()
        {
            var configuration = OpswatSection.Configuration();
            var service = new OpswatMalwareService(configuration, new OpswatApi(configuration));

            var document = new Document(Guid.NewGuid(), Guid.NewGuid(), "sanitize.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                File.ReadAllBytes(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, ".files\\sanitize.xlsm")),
                "integration-test", "system", DateTime.Now);

            service.Register(document);

            Assert.That(document.ContainsProperty("data_id"), Is.True);
            Assert.That(document.ContainsProperty("sha256"), Is.True);
            Assert.That(document.ContainsProperty("in_queue"), Is.True);
            Assert.That(document.GetPropertyValue("status"), Is.EqualTo("inqueue"));

            Assert.That(document.ContainsProperty("scan_all_result_i"), Is.False);
            Assert.That(document.ContainsProperty("scan_all_result_a"), Is.False);
            Assert.That(document.ContainsProperty("progress_percentage"), Is.False);
            Assert.That(document.ContainsProperty("PollIntervalTimespan"), Is.False);

            Poll(service, document, 120);

            Assert.That(document.ContainsProperty("data_id"), Is.True);
            
            if (configuration.ShouldSandbox(".xlsx"))
            {
                Assert.That(document.ContainsProperty("sandbox_id"), Is.True);
            }

            Assert.That(document.ContainsProperty("in_queue"), Is.False);
            Assert.That(document.ContainsProperty("status"), Is.False);
            Assert.That(document.ContainsProperty("PollIntervalTimespan"), Is.False);

            Assert.That(document.GetPropertyValue("scan_all_result_i"), Is.EqualTo("0"));
            Assert.That(document.GetPropertyValue("scan_all_result_a").ToLowerInvariant(),
                Is.EqualTo("no threat detected"));
            Assert.That(document.GetPropertyValue("progress_percentage"), Is.EqualTo("100"));
        }

        [Test]
        public void Should_be_able_to_handle_a_text_file_with_no_sandbox_detonation()
        {
            var configuration = OpswatSection.Configuration();
            var service = new OpswatMalwareService(configuration, new OpswatApi(configuration));

            var document = new Document(Guid.NewGuid(), Guid.NewGuid(), "integration.txt", "text/plain",
                File.ReadAllBytes(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, ".files\\integration.txt")),
                "integration-test", "system", DateTime.Now);

            service.Register(document);

            Assert.That(document.ContainsProperty("data_id"), Is.True);
            Assert.That(document.ContainsProperty("sha256"), Is.True);
            Assert.That(document.ContainsProperty("in_queue"), Is.True);
            Assert.That(document.GetPropertyValue("status"), Is.EqualTo("inqueue"));

            Assert.That(document.ContainsProperty("scan_all_result_i"), Is.False);
            Assert.That(document.ContainsProperty("scan_all_result_a"), Is.False);
            Assert.That(document.ContainsProperty("progress_percentage"), Is.False);
            Assert.That(document.ContainsProperty("PollIntervalTimespan"), Is.False);

            Poll(service, document, 15);

            Assert.That(document.ContainsProperty("data_id"), Is.True);
            
            if (configuration.ShouldSandbox(".xlsx"))
            {
                Assert.That(document.ContainsProperty("sandbox_id"), Is.True);
            }

            Assert.That(document.ContainsProperty("in_queue"), Is.False);
            Assert.That(document.ContainsProperty("status"), Is.False);
            Assert.That(document.ContainsProperty("PollIntervalTimespan"), Is.False);

            Assert.That(document.GetPropertyValue("scan_all_result_i"), Is.EqualTo("0"));
            Assert.That(document.GetPropertyValue("scan_all_result_a").ToLowerInvariant(),
                Is.EqualTo("no threat detected"));
            Assert.That(document.GetPropertyValue("progress_percentage"), Is.EqualTo("100"));
        }
    }
}