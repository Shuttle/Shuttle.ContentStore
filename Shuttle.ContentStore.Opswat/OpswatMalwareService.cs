using System;
using System.IO;
using RestSharp;
using RestSharp.Extensions;
using Shuttle.Core.Contract;

namespace Shuttle.ContentStore.Opswat
{
    public class OpswatMalwareService : IMalwareService
    {
        private readonly IOpswatConfiguration _configuration;
        private readonly IOpswatApi _api;

        public OpswatMalwareService(IOpswatConfiguration configuration, IOpswatApi api)
        {
            Guard.AgainstNull(configuration, nameof(configuration));
            Guard.AgainstNull(api, nameof(api));

            _configuration = configuration;
            _api = api;
        }

        public ServiceStatus Register(Content content)
        {
            Guard.AgainstNull(content, nameof(content));

            var request = new RestRequest(_api.GetFullApiUrl("file"))
            {
                Method = Method.POST,
                RequestFormat = DataFormat.Json
            };

            request.AddFileBytes(content.FileName, content.Bytes, content.FileName, content.ContentType);

            if (!_configuration.SampleSharingAllowed)
            {
                request.AddHeader("samplesharing", "0");
            }

            request.AddHeader("rule", "sanitize");

            if (_configuration.ShouldSandbox(Path.GetExtension(content.FileName)))
            {
                request.AddHeader("sandbox", "windows10");
            }

            var response = _api.GetResponse(request).AsDynamic();

            GuardAgainstException(response);

            if (response.data_id == null)
            {
                throw new OpswatException($"Could not find data id for content with id '{content.Id}'.");
            }

            content.SetProperty("data_id", response.data_id.ToString());
            content.SetProperty("status", response.status.ToString());
            content.SetProperty("in_queue", response.in_queue.ToString());
            content.SetProperty("sha256", response.sha256.ToString());

            return ServiceStatus.Registered;
        }

        public ServiceStatus Poll(Content content)
        {
            Guard.AgainstNull(content, nameof(content));

            return !content.ContainsProperty("sandbox_id") ? PollScan(content) : PollSandbox(content);
        }

        private ServiceStatus PollSandbox(Content content)
        {
            var request = new RestRequest(_api.GetFullApiUrl($"sandbox/{content.GetSandboxId()}"))
            {
                Method = Method.GET,
                RequestFormat = DataFormat.Json
            };

            var response = _api.GetResponse(request).AsDynamic();

            GuardAgainstException(response);

            if (response.sandbox_response == null)
            {
                return ServiceStatus.Processing;
            }

            content.SetProperty("scan_all_result_i", response.scan_results.scan_all_result_i.ToString());
            content.SetProperty("scan_all_result_a", response.scan_results.scan_all_result_a.ToString());

            if (!int.TryParse(content.GetScanResult(), out var scanResult))
            {
                AddPollIntervalTimeSpan(content, _configuration.PollSandboxInterval);

                return ServiceStatus.Processing;
            }

            content.RemoveProperty("PollIntervalTimespan");

            return scanResult == 0 ? ServiceStatus.Passed : ServiceStatus.Suspicious;
        }

        private ServiceStatus PollScan(Content content)
        {
            var request = new RestRequest(_api.GetFullApiUrl($"file/{content.GetDataId()}"))
            {
                Method = Method.GET,
                RequestFormat = DataFormat.Json
            };

            var response = _api.GetResponse(request).AsDynamic();

            GuardAgainstException(response);

            if (response.status != null)
            {
                content.SetProperty("status", response.status.ToString());
                content.SetProperty("in_queue", response.in_queue.ToString());
                content.SetProperty("last_updated", response.last_updated.ToString());

                AddPollIntervalTimeSpan(content, _configuration.PollScanInterval);

                return ServiceStatus.Processing;
            }

            try
            {
                content.SetProperty("scan_all_result_i", response.scan_results.scan_all_result_i.ToString());
                content.SetProperty("progress_percentage", response.scan_results.progress_percentage.ToString());
                content.SetProperty("scan_all_result_a", response.scan_results.scan_all_result_a.ToString());

                if (!int.TryParse(content.GetScanResult(), out var scanResult))
                {
                    scanResult = -1;
                }

                if (!double.TryParse(content.GetProgressPercentage(), out var progressPercentage))
                {
                    progressPercentage = -1;
                }

                if (progressPercentage < 100 || scanResult < 0)
                {
                    AddPollIntervalTimeSpan(content, _configuration.PollScanInterval);

                    return ServiceStatus.Processing;
                }

                if (scanResult > 0 && response.sanitized != null && !content.HasSanitizedBytes)
                {
                    if (!double.TryParse(response.sanitized.progress_percentage.ToString(), out progressPercentage))
                    {
                        progressPercentage = -1;
                    }

                    if (progressPercentage < 100)
                    {
                        return ServiceStatus.Processing;
                    }

                    content.WithSanitizedContent(_api.GetResponse(new RestRequest(response.sanitized.file_path.ToString())).RawBytes);
                }

                content.RemoveProperty("status");
                content.RemoveProperty("in_queue");
                content.RemoveProperty("last_updated");
                content.RemoveProperty("PollIntervalTimespan");

                if (!_configuration.ShouldSandbox(Path.GetExtension(content.FileName)))
                {
                    return scanResult == 0 ? ServiceStatus.Passed : ServiceStatus.Suspicious;
                }
            }
            catch (Exception ex)
            {
                throw new OpswatException($"Could not get scan results for content with id '{content.Id}'.", ex);
            }

            try
            {
                request = new RestRequest($"{_api.GetFullApiUrl("hash")}/{content.GetSha256()}/sandbox")
                {
                    Method = Method.GET,
                    RequestFormat = DataFormat.Json
                };

                response = _api.GetResponse(request).AsDynamic();

                if (response.sandbox_id != null)
                {
                    content.SetProperty("sandbox_id", response.sandbox_id.ToString());
                    content.SetProperty("scan_all_result_i", response.scan_results.scan_all_result_i.ToString());
                    content.SetProperty("scan_all_result_a", response.scan_results.scan_all_result_a.ToString());

                    if (!int.TryParse(content.GetScanResult(), out var scanResult))
                    {
                        AddPollIntervalTimeSpan(content, _configuration.PollSandboxInterval);

                        return ServiceStatus.Processing;
                    }

                    content.RemoveProperty("PollIntervalTimespan");

                    return scanResult == 0 ? ServiceStatus.Passed : ServiceStatus.Suspicious;
                }
            }
            catch (Exception ex)
            {
                throw new OpswatException($"Could not retrieve sandbox hash lookup for content with id '{content.Id}'.", ex);
            }

            try
            {
                request = new RestRequest($"{_api.GetFullApiUrl("sandbox")}/{content.GetDataId()}/scan")
                {
                    Method = Method.POST,
                    RequestFormat = DataFormat.Json
                };

                request.AddHeader("sandbox", "windows10");

                response = _api.GetResponse(request).AsDynamic();

                GuardAgainstException(response);

                if (response.sandbox_id == null)
                {
                    throw new OpswatException($"Could not find sandbox id for content with id '{content.Id}'.");
                }

                content.SetProperty("sandbox_id", response.sandbox_id.ToString());

                AddPollIntervalTimeSpan(content, _configuration.PollSandboxInterval);

                return ServiceStatus.Processing;
            }
            catch (Exception ex)
            {
                throw new OpswatException($"Could not submit a sandbox request for content with id '{content.Id}'.", ex);
            }
        }

        private static void AddPollIntervalTimeSpan(Content content, TimeSpan interval)
        {
            content.SetProperty("PollIntervalTimespan", interval.ToString());
        }

        private static void GuardAgainstException(dynamic response)
        {
            if (response.error != null)
            {
                throw new OpswatException(string.Join(" / ", response.error.messages));
            }
        }
    }
}